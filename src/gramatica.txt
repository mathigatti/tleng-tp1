
Gramática:
#G → SG | CtrlG | S | G
G → SG | CtrlG 
S →  VarOps ; | Func ;
Ctrl → IF| Loop

Loop → while(ExpBool) Bloque | do Bloque while(ExpBool); | for(VarAsig; ExpBool; VarOps)Bloque

Control:
IF→ if(ExpBool) then Bloque else Bloque
Bloque → S | {G}


Funciones
Func → FuncReturn | FuncVoid
FuncReturn → FuncInt | FuncString | FuncBool
#FuncInt → multiplicacionEscalar(Vec, EMat, M) | length(Vec)
FuncInt → multiplicacionEscalar(Vec, EMat, var) | length(var)
FuncString → capitalizar(ExpString)
FuncBool → colineales(Vec,Vec )
FuncVoid → print(V) 

Vectores  y variables
Vec →  var = [Elem] 
Elem→ Valores, Elem | Valores
Valores → EMat | ExpBool | ExpString | VarYVals | FuncReturn
VarYVals → var | VecVal
VecVal →  var M
#M → [int] | [int] M
// vec se coloca en el lexer
#M → ExpBool | 𝝺


Operaciones binarias enteros:
EMat → EMat + P | EMat - P | P
P → P * Exp | P / Exp | P % Exp | Exp
Exp → Exp ^ ISing | ISing
ISing → -Paren | +Paren | Paren
Paren → (EMat) | int | VarYVals | float | VarOps | VarYVals | FuncInt

Operaciones con strings
ExpString → ExpString + string | string | VarYVals | FuncString

Registros:
Reg → {U}
#U -> campo: Valores, U | campo: Valores
U -> string: Valores, U | string: Valores

 alumno = {nombre:"Juan Perez", edad:23};

Operadores de variables:
VarOps → --SMM | ++SMM | SMM
SMM → VarYVals++ | VarYVals--

 Asignaciones:
VarAsig → SIgual *= Valores | SIgual /= Valores | SIgual
SIgual → Asig += Valores |  Asig -= Valores | Asig
#Asig → var = Valores  | var = Valores    | var = Vec          
#Asig → var = Valores  | var = var 

// (para generar a = b += 1)
//a = v *= [1,2,3]

ExpBool -> True | False

Lo de abajo no esta implementado
Op booleanas
ExpBool → Or ? ExpBool : ExpBool  | Or
Or → Or or And | And
And →  And and Eq | Eq
Eq → Eq == TBool |  Eq != TBool | Mayor 
Mayor → TCompare > TCompare | TCompare >= TCompare | Menor
Menor → TCompare < TCompare | TCompare <= TCompare | Not 
// (not 1 < 2 != not (1 < 2))
Not →  not Not | TBool 
TBool → (ExpBool) | bool | VarYVals | FuncBool
TCompare → EMat | VarOps | VarYVals | FuncInt
