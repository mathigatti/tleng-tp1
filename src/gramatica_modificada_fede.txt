Gramática:
P → S P' | Ctrl P' | Comentario P
P' -> S P' | Ctrl P' | Comentario P' | lanbda

S →  Func; | var_asign;
Ctrl →  IFE | Loop

Loop → while(exp_bool) Bloque | do Bloque while(exp_bool); | for(var_asig; exp_bool; var_asig)Bloque

Control:
IFE→ if(exp_bool) Bloque else Bloque  | if(exp_bool) Bloque 
Bloque → S | {P}

Comentarios: 
Comentario -> #CADENA

Funciones
Func → FuncReturn | FuncVoid
FuncReturn → FuncInt | colineales(exp_bool,exp_bool) | capitalizar(exp_cadena)
FuncInt → multiplicacionEscalar(VARIABLE, exp_mat, VARIABLE) | length(VARIABLE)
FuncVoid → print(valores) 

Vectores  y variables
Valores → exp_mat | exp_bool | exp_cadena | VARIABLE |  exp_arreglo  | Reg | FuncReturn

exp_arreglo -> [Valores ListaValores] | [] | multiplicacionEscalar(VARIABLE, exp_mat, VARIABLE)
NUMBER -> Signonum
Signo -> + | - | lanbda 
ListaValores -> ,Valores ListaValores

Registros:
Reg → {U}
U -> CADENA: Valores, U | CADENA: Valores

Asignaciones:
var_asign → VARIABLE *= Valores | VARIABLE /= Valores | VARIABLE | VARIABLE += Valores |  VARIABLE -= Valores
 			| VARIABLE = Valores | VARIABLE = OperadorTernario

OperadorTernario -> (exp_bool)? exp_bool:exp_bool; | (exp_bool)? exp_mat:exp_mat; | (exp_bool)? exp_cadena:exp_cadena;

VARIABLE → aVar
Var = aVar | lanbda 
// este es el token , dsp hay q pedirle el val a "a" y que te de las letras 
CADENA → "Var"
// una cadena de un string tiene q tener siempre comillas adelante y atras 

---------------------------------------------------------------------------------------------------------------------------------

Op booleanas
exp_bool → parentesisBool == parentesisBool | parentesisBool != parentesisBool | parentesisMat != parentesisMat | parentesisMat 		== parentesisMat | parentesisCadena == parentesisCadena | parentesisCadena != parentesisCadena  
	 	| parentesisMat > parentesisMat | parentesisMat < parentesisMat
	 	| NOT parentesisBool | parentesisBool AND parentesisBool | parentesisBool OR parentesisBool
	 	| VARIABLE | True | False | colineales(VARIABLE, VARIABLE)

Operaciones con strings
exp_cadena → parentesisCadena + parentesisCadena | parentesisCadena | CADENA | capitalizar(exp_cadena) | VARIABLE 

Operaciones binarias enteros:
exp_mat → parentesisMat + parentesisMat | parentesisMat - parentesisMat | parentesisMat * parentesisMat | parentesisMat / parentesisMat | parentesisMat ^ parentesisMat | parentesisMat % parentesisMat | parentesisMat++ | parentesisMat-- | num | FuncInt | VARIABLE | ++parentesisMat | --parentesisMat


parentesisBool -> (exp_bool) | exp_bool
parentesisMat -> (exp_mat) | exp_mat
parentesisCadena -> (exp_cadena) | exp_cadena
