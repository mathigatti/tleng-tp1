
Gramática:
P → S P | Ctrl P | Comentario P | lambda
S →  var_pos ; | Func; | var_asign;
Ctrl →  IFE | Loop

Loop → while(exp_bool) Bloque | do Bloque while(exp_bool); | for(var_asig; exp_bool; var_pos)Bloque

Control:
IFE→ if(exp_bool) Bloque else Bloque 
Bloque → S | {P}

Comentarios: 
Comentario -> #CADENA

Funciones
Func → FuncReturn | FuncVoid
FuncReturn → FuncInt | colineales(exp_bool,exp_bool) | capitalizar(exp_cadena)
FuncInt → multiplicacionEscalar(Vec, exp_mat, var) | length(var)
FuncVoid → print(valores) 

Vectores  y variables
Valores → exp_mat | exp_bool | exp_cadena | VARIABLE |  exp_arreglo  | var_pos | Reg | FuncReturn
// q es var_pos ?? 
exp_arreglo -> [Valores ListaValores] | []
NUMBER -> num
ListaValores -> ,Valores ListaValores

Operaciones binarias enteros:
exp_mat → exp_mat + exp_mat | exp_mat - exp_mat | exp_mat * exp_mat | exp_mat / exp_mat | 
		exp_mat ^ exp_mat | exp_mat % exp_mat | exp_mat++ | exp_mat-- | num | FuncInt
		(exp_mat) + (exp_mat) | (exp_mat) - (exp_mat) | (exp_mat) * (exp_mat) | (exp_mat) / (exp_mat) | 
		(exp_mat ^ (exp_mat) | (exp_mat % (exp_mat) | (exp_mat)++ | (exp_mat)-- |
		

Operaciones con strings
exp_cadena → exp_cadena + exp_cadena | exp_cadena | CADENA | capitalizar(exp_cadena) 

Registros:
Reg → {U}
U -> CADENA: Valores, U | CADENA: Valores


Operadores de variables:
var_pos → --SMM | ++SMM | SMM
SMM → exp_mat++ | exp_mat--

Asignaciones:
var_asign → VARIABLE *= Valores | VARIABLE /= Valores | VARIABLE | VARIABLE += Valores |  VARIABLE -= Valores
 			| VARIABLE = Valores 

Asig → VARIABLE = Valores  | VARIABLE  = [lista_valores] 
lista_valores -> Valores,lista_valores| Valores
VARIABLE → aVar
Var = aVar | lanbda 
// este es el token , dsp hay q pedirle el val a "a" y que te de las letras 
CADENA → "Var"
// una cadena de un string tiene q tener siempre comillas adelante y atras 


// (para generar a = b += 1)
//a = v *= [1,2,3] ? 

Lo de abajo no esta implementado
Op booleanas
exp_bool → exp == exp | exp != exp | exp_mat > exp_mat | exp_mat < exp_mat 
			| NOT exp_bool | exp_bool AND exp_bool | exp_bool OR exp_bool | True | False 
exp -> exp_bool | exp_mat | CADENA
